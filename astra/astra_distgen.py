


from astra import Astra
from astra.tools import full_path
from distgen import Generator   
from distgen.writers import write_astra
    
    
def run_astra_with_distgen(settings=None, astra_input_file=None, distgen_input_file=None, workdir=None, 
                             astra_bin='$ASTRA_BIN', timeout=2500, verbose=False,
                             auto_set_spacecharge_mesh=False):
    """
    Run Astra with particles generated by distgen. 
    
        settings: dict with keys that can appear in an Astra or distgen Generator input file. 
        
    Example usage:
        A = run_astra_with_distgen({'lspch':False},
                       astra_input_file='$LCLS_LATTICE/astra/models/gunb_eic/astra.in',
                       distgen_input_file='$LCLS_LATTICE/distgen/models/gunb_gaussian/gunb_gaussian.json',
                       verbose=True,
                       timeout=None
                      )        
        
    """

    # Call simpler evaluation if there is no generator:
    if not distgen_input_file:
        return run_astra(settings=settings, 
                         astra_input_file=astra_input_file, 
                         workdir=workdir,
                         astra_bin=astra_bin, 
                         timeout=timeout, 
                         verbose=verbose)
        
    
    if verbose:
        print('run_astra_with_generator') 

    # Make astra and generator objects
    A = Astra(astra_bin=astra_bin, input_file=astra_input_file, workdir=workdir)
    A.timeout=timeout
    A.verbose = verbose
    
    # Distgen generator
    G = Generator(verbose=verbose)
    f = full_path(distgen_input_file)
    distgen_params = json.load(open(f))
    
    
    # Link particle files
    particle_file = 'distgen_astra_particles.dat'
    A.input['newrun']['distribution'] = particle_file
    A.input['newrun']['l_rm_back'] = True # Remove backwards particles
    
    print(particle_file )
    
    # Set inputs
    if settings:
        set_astra_and_distgen(A.input, distgen_params, settings, verbose=verbose)
    
    # Set a
    distgen_params['output']['type'] = 'astra' 
    #distgen_params['output']['file'] = os.path.join(A.path, particle_file)
    
    # Configure distgen
    G.parse_input(distgen_params)
    
    if auto_set_spacecharge_mesh:
        n_particles = distgen_params['beam']['particle_count']
        sc_settings = recommended_spacecharge_mesh(n_particles)
        A.input['charge'].update(sc_settings)
        if verbose:
            print('set spacecharge mesh for n_particles:', n_particles, 'to', sc_settings)        
    
    # Run
    beam = G.beam()
    particle_file = os.path.join(A.path, particle_file)
    write_astra(beam, particle_file, verbose=verbose)
    
    A.run()
    
    return A

