


from astra import Astra
from astra.tools import full_path
from .astra import recommended_spacecharge_mesh

from distgen import Generator   
from distgen.writers import write_astra
from distgen.tools import update_nested_dict

from pmd_beamphysics import ParticleGroup

import json
import os

def set_astra_and_distgen(astra_input, distgen_input, settings, verbose=False):
    """
    Searches astra and distgen input for keys in settings, and sets their values to the appropriate input.
    """
    for k, v in settings.items():
        found=False
        for nl in astra_input:
            if k in astra_input[nl]:
                found = True
                if verbose:
                    print(k, 'is in astra', nl)
                astra_input[nl][k] = settings[k]
        
        if not found:
            distgen_input = update_nested_dict(distgen_input, {k:v}, verbose=verbose)
            #set_nested_dict(distgen_input, k, v)    
    
    return astra_input, distgen_input
    
def run_astra_with_distgen(settings=None,
                           astra_input_file=None,
                           distgen_input_file=None,
                           workdir=None, 
                           astra_bin='$ASTRA_BIN',
                           timeout=2500,
                           verbose=False,
                           auto_set_spacecharge_mesh=True):
    """
    Run Astra with particles generated by distgen. 
    
        settings: dict with keys that can appear in an Astra or distgen Generator input file. 
        
    Example usage:
        A = run_astra_with_distgen({'lspch':False},
                       astra_input_file='$LCLS_LATTICE/astra/models/gunb_eic/astra.in',
                       distgen_input_file='$LCLS_LATTICE/distgen/models/gunb_gaussian/gunb_gaussian.json',
                       verbose=True,
                       timeout=None
                      )        
        
    """

    # Call simpler evaluation if there is no generator:
    if not distgen_input_file:
        return run_astra(settings=settings, 
                         astra_input_file=astra_input_file, 
                         workdir=workdir,
                         astra_bin=astra_bin, 
                         timeout=timeout, 
                         verbose=verbose)
        
    
    if verbose:
        print('run_astra_with_generator') 

    # Distgen generator
    D = Generator(input = distgen_input_file, verbose=verbose)  
        
    # Make astra objects
    A = Astra(astra_bin=astra_bin, input_file=astra_input_file, workdir=workdir)
    A.timeout=timeout
    A.verbose = verbose
    
    # Special
    A.input['newrun']['l_rm_back'] = True # Remove backwards particles
    
        
    
    # Set inputs
    if settings:
        A.input, D.input = set_astra_and_distgen(A.input, D.input, settings, verbose=verbose)

    # Get initial particles
    beam = D.beam()
    P = ParticleGroup(data=beam.data())

    # Attach to Astra object
    A.initial_particles = P
    
    if auto_set_spacecharge_mesh:
        n_particles = len(P)
        sc_settings = recommended_spacecharge_mesh(n_particles)
        A.input['charge'].update(sc_settings)
        if verbose:
            print('set spacecharge mesh for n_particles:', n_particles, 'to', sc_settings)        
            
    A.run()
    
    return A


def evaluate_astra_with_distgen(settings, archive_path=None, merit_f=None, **run_astra_with_distgen_params):
    """
    Simple evaluate astra.
    
    Similar to run_astra_with_distgen, but returns a flat dict of outputs. 
    
    Will raise an exception if there is an error. 
    
    """
    A = run_astra_with_distgen(settings, **run_astra_with_distgen_params)
        
    if merit_f:
        output = merit_f(A)
    else:
        output = default_astra_merit(A)
    
    if output['error']:
        raise
    
    fingerprint = A.fingerprint()
    
    output['fingerprint'] = fingerprint
    
    if archive_path:
        path = full_path(archive_path)
        assert os.path.exists(path), f'archive path does not exist: {path}'
        archive_file = os.path.join(path, fingerprint+'.h5')
        A.archive(archive_file)
        output['archive'] = archive_file
        
    return output
